// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zCustomMembers = z.object({
    id: z.uuid().readonly(),
    email: z.string().readonly(),
    avatar: z.url().readonly(),
    first_name: z.string().readonly(),
    last_name: z.string().readonly(),
    date_joined: z.iso.datetime().readonly()
});

export const zCustomGroup = z.object({
    id: z.uuid().readonly(),
    member_count: z.int().readonly(),
    members: z.array(zCustomMembers).readonly(),
    name: z.string(),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    hidden: z.optional(z.boolean()),
    created: z.iso.datetime().readonly(),
    updated: z.iso.datetime().readonly(),
    parent: z.optional(z.union([
        z.uuid(),
        z.null()
    ]))
});

export const zCustomUserGroup = z.object({
    id: z.uuid().readonly(),
    name: z.string().readonly()
});

export const zCustomUser = z.object({
    id: z.uuid().readonly(),
    email: z.email().max(254),
    avatar: z.optional(z.union([
        z.url(),
        z.null()
    ])),
    first_name: z.optional(z.string().max(30)),
    last_name: z.optional(z.string().max(30)),
    is_active: z.optional(z.boolean()),
    groups: z.array(zCustomUserGroup).readonly(),
    date_joined: z.iso.datetime().readonly()
});

export const zEnvironment = z.object({
    id: z.uuid().readonly(),
    name: z.string(),
    created: z.iso.datetime().readonly(),
    updated: z.iso.datetime().readonly(),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    url: z.url().max(200),
    pg_url: z.url(),
    parent_org: z.uuid(),
    auth_user: z.uuid()
});

export const zNested = z.object({
    id: z.uuid().readonly(),
    name: z.string(),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    hidden: z.optional(z.boolean()),
    created: z.iso.datetime().readonly(),
    updated: z.iso.datetime().readonly(),
    parent: z.optional(z.union([
        z.uuid(),
        z.null()
    ]))
});

export const zOrganization = z.object({
    id: z.uuid().readonly(),
    name: z.string(),
    avatar: z.optional(z.union([
        z.url(),
        z.null()
    ])),
    host: z.string().regex(/^[a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\.?$/),
    created: z.iso.datetime().readonly(),
    updated: z.iso.datetime().readonly(),
    root: zNested
});

export const zPaginatedCustomGroupList = z.object({
    count: z.int(),
    next: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    previous: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    results: z.array(zCustomGroup)
});

export const zPaginatedCustomUserList = z.object({
    count: z.int(),
    next: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    previous: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    results: z.array(zCustomUser)
});

export const zPaginatedEnvironmentList = z.object({
    count: z.int(),
    next: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    previous: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    results: z.array(zEnvironment)
});

export const zPaginatedOrganizationList = z.object({
    count: z.int(),
    next: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    previous: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    results: z.array(zOrganization)
});

export const zResourcePermission = z.object({
    id: z.uuid().readonly(),
    resource_id: z.string(),
    inherit_from_parent: z.optional(z.boolean()),
    created: z.iso.datetime().readonly(),
    updated: z.iso.datetime().readonly(),
    can_create: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    can_read: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    can_update: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    can_delete: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    children_permissions: z.optional(z.union([
        z.uuid(),
        z.null()
    ])),
    user_resource: z.uuid(),
    group: z.optional(z.union([
        z.uuid(),
        z.null()
    ]))
});

export const zPaginatedResourcePermissionList = z.object({
    count: z.int(),
    next: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    previous: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    results: z.array(zResourcePermission)
});

export const zResourceUserGroup = z.object({
    id: z.uuid().readonly(),
    name: z.string(),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    created: z.iso.datetime().readonly(),
    updated: z.iso.datetime().readonly(),
    parent: z.optional(z.union([
        z.uuid(),
        z.null()
    ]))
});

export const zPaginatedResourceUserGroupList = z.object({
    count: z.int(),
    next: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    previous: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    results: z.array(zResourceUserGroup)
});

export const zResourceUser = z.object({
    id: z.uuid().readonly(),
    user_id: z.string(),
    created: z.iso.datetime().readonly(),
    environment: z.uuid(),
    groups: z.array(z.uuid())
});

export const zPaginatedResourceUserList = z.object({
    count: z.int(),
    next: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    previous: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    results: z.array(zResourceUser)
});

export const zResourceUserPermissions = z.object({
    id: z.uuid().readonly(),
    resource_id: z.string(),
    can_create: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    can_read: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    can_update: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    can_delete: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    user_id: z.optional(z.union([
        z.uuid(),
        z.null()
    ])),
    environment: z.uuid()
});

export const zPaginatedResourceUserPermissionsList = z.object({
    count: z.int(),
    next: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    previous: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    results: z.array(zResourceUserPermissions)
});

export const zPatchedCustomGroup = z.object({
    id: z.optional(z.uuid().readonly()),
    member_count: z.optional(z.int().readonly()),
    members: z.optional(z.array(zCustomMembers).readonly()),
    name: z.optional(z.string()),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    hidden: z.optional(z.boolean()),
    created: z.optional(z.iso.datetime().readonly()),
    updated: z.optional(z.iso.datetime().readonly()),
    parent: z.optional(z.union([
        z.uuid(),
        z.null()
    ]))
});

export const zPatchedCustomUser = z.object({
    id: z.optional(z.uuid().readonly()),
    email: z.optional(z.email().max(254)),
    avatar: z.optional(z.union([
        z.url(),
        z.null()
    ])),
    first_name: z.optional(z.string().max(30)),
    last_name: z.optional(z.string().max(30)),
    is_active: z.optional(z.boolean()),
    groups: z.optional(z.array(zCustomUserGroup).readonly()),
    date_joined: z.optional(z.iso.datetime().readonly())
});

export const zPatchedEnvironment = z.object({
    id: z.optional(z.uuid().readonly()),
    name: z.optional(z.string()),
    created: z.optional(z.iso.datetime().readonly()),
    updated: z.optional(z.iso.datetime().readonly()),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    url: z.optional(z.url().max(200)),
    pg_url: z.optional(z.url()),
    parent_org: z.optional(z.uuid()),
    auth_user: z.optional(z.uuid())
});

export const zPatchedOrganization = z.object({
    id: z.optional(z.uuid().readonly()),
    name: z.optional(z.string()),
    avatar: z.optional(z.union([
        z.url(),
        z.null()
    ])),
    host: z.optional(z.string().regex(/^[a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\.?$/)),
    created: z.optional(z.iso.datetime().readonly()),
    updated: z.optional(z.iso.datetime().readonly()),
    root: z.optional(zNested)
});

export const zPatchedResourcePermission = z.object({
    id: z.optional(z.uuid().readonly()),
    resource_id: z.optional(z.string()),
    inherit_from_parent: z.optional(z.boolean()),
    created: z.optional(z.iso.datetime().readonly()),
    updated: z.optional(z.iso.datetime().readonly()),
    can_create: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    can_read: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    can_update: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    can_delete: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    children_permissions: z.optional(z.union([
        z.uuid(),
        z.null()
    ])),
    user_resource: z.optional(z.uuid()),
    group: z.optional(z.union([
        z.uuid(),
        z.null()
    ]))
});

export const zPatchedResourceUser = z.object({
    id: z.optional(z.uuid().readonly()),
    user_id: z.optional(z.string()),
    created: z.optional(z.iso.datetime().readonly()),
    environment: z.optional(z.uuid()),
    groups: z.optional(z.array(z.uuid()))
});

export const zPatchedResourceUserGroup = z.object({
    id: z.optional(z.uuid().readonly()),
    name: z.optional(z.string()),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    created: z.optional(z.iso.datetime().readonly()),
    updated: z.optional(z.iso.datetime().readonly()),
    parent: z.optional(z.union([
        z.uuid(),
        z.null()
    ]))
});

/**
 * Used in :class:`durin.views.TokenSessionsViewSet`.
 *
 * .. versionadded:: 1.0.0
 */
export const zTokenSessions = z.object({
    id: z.int().readonly(),
    client: z.string().readonly(),
    created: z.iso.datetime().readonly(),
    expiry: z.iso.datetime().readonly(),
    has_expired: z.boolean().readonly(),
    is_current: z.boolean().readonly(),
    expires_in_str: z.string()
});

export const zAccessControlGroupsListData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        ordering: z.optional(z.string()),
        page: z.optional(z.int()),
        size: z.optional(z.int())
    }))
});

export const zAccessControlGroupsListResponse = zPaginatedResourceUserGroupList;

export const zAccessControlGroupsCreateData = z.object({
    body: zResourceUserGroup,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAccessControlGroupsCreateResponse = zResourceUserGroup;

export const zAccessControlGroupsDestroyData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * No response body
 */
export const zAccessControlGroupsDestroyResponse = z.void();

export const zAccessControlGroupsRetrieveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zAccessControlGroupsRetrieveResponse = zResourceUserGroup;

export const zAccessControlGroupsPartialUpdateData = z.object({
    body: z.optional(zPatchedResourceUserGroup),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zAccessControlGroupsPartialUpdateResponse = zResourceUserGroup;

export const zAccessControlGroupsUpdateData = z.object({
    body: zResourceUserGroup,
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zAccessControlGroupsUpdateResponse = zResourceUserGroup;

export const zAccessControlPermissionsListData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        ordering: z.optional(z.string()),
        page: z.optional(z.int()),
        size: z.optional(z.int())
    }))
});

export const zAccessControlPermissionsListResponse = zPaginatedResourcePermissionList;

export const zAccessControlPermissionsCreateData = z.object({
    body: zResourcePermission,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAccessControlPermissionsCreateResponse = zResourcePermission;

export const zAccessControlPermissionsDestroyData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * No response body
 */
export const zAccessControlPermissionsDestroyResponse = z.void();

export const zAccessControlPermissionsRetrieveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zAccessControlPermissionsRetrieveResponse = zResourcePermission;

export const zAccessControlPermissionsPartialUpdateData = z.object({
    body: z.optional(zPatchedResourcePermission),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zAccessControlPermissionsPartialUpdateResponse = zResourcePermission;

export const zAccessControlPermissionsUpdateData = z.object({
    body: zResourcePermission,
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zAccessControlPermissionsUpdateResponse = zResourcePermission;

export const zAccessControlResourcesListData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        ordering: z.optional(z.string()),
        page: z.optional(z.int()),
        size: z.optional(z.int())
    }))
});

export const zAccessControlResourcesListResponse = zPaginatedResourceUserPermissionsList;

export const zAccessControlResourcesRetrieveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zAccessControlResourcesRetrieveResponse = zResourceUserPermissions;

export const zAccessControlUsersListData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        ordering: z.optional(z.string()),
        page: z.optional(z.int()),
        size: z.optional(z.int())
    }))
});

export const zAccessControlUsersListResponse = zPaginatedResourceUserList;

export const zAccessControlUsersCreateData = z.object({
    body: zResourceUser,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAccessControlUsersCreateResponse = zResourceUser;

export const zAccessControlUsersDestroyData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * No response body
 */
export const zAccessControlUsersDestroyResponse = z.void();

export const zAccessControlUsersRetrieveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zAccessControlUsersRetrieveResponse = zResourceUser;

export const zAccessControlUsersPartialUpdateData = z.object({
    body: z.optional(zPatchedResourceUser),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zAccessControlUsersPartialUpdateResponse = zResourceUser;

export const zAccessControlUsersUpdateData = z.object({
    body: zResourceUser,
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zAccessControlUsersUpdateResponse = zResourceUser;

export const zAuthApiaccessDestroyData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * No response body
 */
export const zAuthApiaccessDestroyResponse = z.void();

export const zAuthApiaccessRetrieveData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthApiaccessCreateData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthLoginCreateData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthLogoutCreateData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthLogoutallCreateData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthRefreshCreateData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zAuthSessionsListData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        ordering: z.optional(z.string())
    }))
});

export const zAuthSessionsListResponse = z.array(zTokenSessions);

export const zAuthSessionsDestroyData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.int()
    }),
    query: z.optional(z.never())
});

/**
 * No response body
 */
export const zAuthSessionsDestroyResponse = z.void();

export const zEnvironmentsListData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        ordering: z.optional(z.string()),
        page: z.optional(z.int()),
        size: z.optional(z.int())
    }))
});

export const zEnvironmentsListResponse = zPaginatedEnvironmentList;

export const zEnvironmentsCreateData = z.object({
    body: zEnvironment,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zEnvironmentsCreateResponse = zEnvironment;

export const zEnvironmentsDestroyData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * No response body
 */
export const zEnvironmentsDestroyResponse = z.void();

export const zEnvironmentsRetrieveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zEnvironmentsRetrieveResponse = zEnvironment;

export const zEnvironmentsPartialUpdateData = z.object({
    body: z.optional(zPatchedEnvironment),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zEnvironmentsPartialUpdateResponse = zEnvironment;

export const zEnvironmentsUpdateData = z.object({
    body: zEnvironment,
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zEnvironmentsUpdateResponse = zEnvironment;

export const zGroupsListData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        created: z.optional(z.iso.datetime()),
        created__gte: z.optional(z.string()),
        created__lte: z.optional(z.string()),
        description__contains: z.optional(z.string()),
        description__exact: z.optional(z.string()),
        hidden: z.optional(z.boolean()),
        id: z.optional(z.uuid()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        name: z.optional(z.string()),
        name__contains: z.optional(z.string()),
        name__exact: z.optional(z.string()),
        ordering: z.optional(z.string()),
        page: z.optional(z.int()),
        parent: z.optional(z.uuid()),
        parent__exact: z.optional(z.string()),
        parent__in: z.optional(z.string()),
        parent__isnull: z.optional(z.string()),
        size: z.optional(z.int()),
        updated: z.optional(z.iso.datetime()),
        updated__gte: z.optional(z.string()),
        updated__lte: z.optional(z.string())
    }))
});

export const zGroupsListResponse = zPaginatedCustomGroupList;

export const zGroupsCreateData = z.object({
    body: zCustomGroup,
    path: z.optional(z.never()),
    query: z.optional(z.object({
        created__gte: z.optional(z.string()),
        created__lte: z.optional(z.string()),
        description__contains: z.optional(z.string()),
        description__exact: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        name__contains: z.optional(z.string()),
        name__exact: z.optional(z.string()),
        parent__exact: z.optional(z.string()),
        parent__in: z.optional(z.string()),
        parent__isnull: z.optional(z.string()),
        updated__gte: z.optional(z.string()),
        updated__lte: z.optional(z.string())
    }))
});

export const zGroupsCreateResponse = zCustomGroup;

export const zGroupsDestroyData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.object({
        created__gte: z.optional(z.string()),
        created__lte: z.optional(z.string()),
        description__contains: z.optional(z.string()),
        description__exact: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        name__contains: z.optional(z.string()),
        name__exact: z.optional(z.string()),
        parent__exact: z.optional(z.string()),
        parent__in: z.optional(z.string()),
        parent__isnull: z.optional(z.string()),
        updated__gte: z.optional(z.string()),
        updated__lte: z.optional(z.string())
    }))
});

/**
 * No response body
 */
export const zGroupsDestroyResponse = z.void();

export const zGroupsRetrieveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.object({
        created__gte: z.optional(z.string()),
        created__lte: z.optional(z.string()),
        description__contains: z.optional(z.string()),
        description__exact: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        name__contains: z.optional(z.string()),
        name__exact: z.optional(z.string()),
        parent__exact: z.optional(z.string()),
        parent__in: z.optional(z.string()),
        parent__isnull: z.optional(z.string()),
        updated__gte: z.optional(z.string()),
        updated__lte: z.optional(z.string())
    }))
});

export const zGroupsRetrieveResponse = zCustomGroup;

export const zGroupsPartialUpdateData = z.object({
    body: z.optional(zPatchedCustomGroup),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.object({
        created__gte: z.optional(z.string()),
        created__lte: z.optional(z.string()),
        description__contains: z.optional(z.string()),
        description__exact: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        name__contains: z.optional(z.string()),
        name__exact: z.optional(z.string()),
        parent__exact: z.optional(z.string()),
        parent__in: z.optional(z.string()),
        parent__isnull: z.optional(z.string()),
        updated__gte: z.optional(z.string()),
        updated__lte: z.optional(z.string())
    }))
});

export const zGroupsPartialUpdateResponse = zCustomGroup;

export const zGroupsUpdateData = z.object({
    body: zCustomGroup,
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.object({
        created__gte: z.optional(z.string()),
        created__lte: z.optional(z.string()),
        description__contains: z.optional(z.string()),
        description__exact: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        name__contains: z.optional(z.string()),
        name__exact: z.optional(z.string()),
        parent__exact: z.optional(z.string()),
        parent__in: z.optional(z.string()),
        parent__isnull: z.optional(z.string()),
        updated__gte: z.optional(z.string()),
        updated__lte: z.optional(z.string())
    }))
});

export const zGroupsUpdateResponse = zCustomGroup;

export const zUpdateMembersData = z.object({
    body: z.optional(z.object({
        members: z.optional(z.array(z.uuid()))
    })),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.object({
        created__gte: z.optional(z.string()),
        created__lte: z.optional(z.string()),
        description__contains: z.optional(z.string()),
        description__exact: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        name__contains: z.optional(z.string()),
        name__exact: z.optional(z.string()),
        parent__exact: z.optional(z.string()),
        parent__in: z.optional(z.string()),
        parent__isnull: z.optional(z.string()),
        updated__gte: z.optional(z.string()),
        updated__lte: z.optional(z.string())
    }))
});

export const zUpdateMembersResponse = z.array(z.string());

export const zOrganizationsListData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        ordering: z.optional(z.string()),
        page: z.optional(z.int()),
        size: z.optional(z.int())
    }))
});

export const zOrganizationsListResponse = zPaginatedOrganizationList;

export const zOrganizationsCreateData = z.object({
    body: zOrganization,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zOrganizationsCreateResponse = zOrganization;

export const zOrganizationsDestroyData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * No response body
 */
export const zOrganizationsDestroyResponse = z.void();

export const zOrganizationsRetrieveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zOrganizationsRetrieveResponse = zOrganization;

export const zOrganizationsPartialUpdateData = z.object({
    body: z.optional(zPatchedOrganization),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zOrganizationsPartialUpdateResponse = zOrganization;

export const zOrganizationsUpdateData = z.object({
    body: zOrganization,
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zOrganizationsUpdateResponse = zOrganization;

export const zUsersListData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        date_joined: z.optional(z.string()),
        email: z.optional(z.string()),
        email__contains: z.optional(z.string()),
        first_name: z.optional(z.string()),
        first_name__contains: z.optional(z.string()),
        first_name__exact: z.optional(z.string()),
        groups__id__exact: z.optional(z.string()),
        groups__id__in: z.optional(z.string()),
        id: z.optional(z.uuid()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        is_active: z.optional(z.string()),
        last_name: z.optional(z.string()),
        last_name__contains: z.optional(z.string()),
        last_name__exact: z.optional(z.string()),
        ordering: z.optional(z.string()),
        page: z.optional(z.int()),
        size: z.optional(z.int())
    }))
});

export const zUsersListResponse = zPaginatedCustomUserList;

export const zUsersCreateData = z.object({
    body: zCustomUser,
    path: z.optional(z.never()),
    query: z.optional(z.object({
        date_joined: z.optional(z.string()),
        email__contains: z.optional(z.string()),
        first_name__contains: z.optional(z.string()),
        first_name__exact: z.optional(z.string()),
        groups__id__exact: z.optional(z.string()),
        groups__id__in: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        is_active: z.optional(z.string()),
        last_name__contains: z.optional(z.string()),
        last_name__exact: z.optional(z.string())
    }))
});

export const zUsersCreateResponse = zCustomUser;

export const zUsersDestroyData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.object({
        date_joined: z.optional(z.string()),
        email__contains: z.optional(z.string()),
        first_name__contains: z.optional(z.string()),
        first_name__exact: z.optional(z.string()),
        groups__id__exact: z.optional(z.string()),
        groups__id__in: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        is_active: z.optional(z.string()),
        last_name__contains: z.optional(z.string()),
        last_name__exact: z.optional(z.string())
    }))
});

/**
 * No response body
 */
export const zUsersDestroyResponse = z.void();

export const zUsersRetrieveData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.object({
        date_joined: z.optional(z.string()),
        email__contains: z.optional(z.string()),
        first_name__contains: z.optional(z.string()),
        first_name__exact: z.optional(z.string()),
        groups__id__exact: z.optional(z.string()),
        groups__id__in: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        is_active: z.optional(z.string()),
        last_name__contains: z.optional(z.string()),
        last_name__exact: z.optional(z.string())
    }))
});

export const zUsersRetrieveResponse = zCustomUser;

export const zUsersPartialUpdateData = z.object({
    body: z.optional(zPatchedCustomUser),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.object({
        date_joined: z.optional(z.string()),
        email__contains: z.optional(z.string()),
        first_name__contains: z.optional(z.string()),
        first_name__exact: z.optional(z.string()),
        groups__id__exact: z.optional(z.string()),
        groups__id__in: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        is_active: z.optional(z.string()),
        last_name__contains: z.optional(z.string()),
        last_name__exact: z.optional(z.string())
    }))
});

export const zUsersPartialUpdateResponse = zCustomUser;

export const zUsersUpdateData = z.object({
    body: zCustomUser,
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.object({
        date_joined: z.optional(z.string()),
        email__contains: z.optional(z.string()),
        first_name__contains: z.optional(z.string()),
        first_name__exact: z.optional(z.string()),
        groups__id__exact: z.optional(z.string()),
        groups__id__in: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        is_active: z.optional(z.string()),
        last_name__contains: z.optional(z.string()),
        last_name__exact: z.optional(z.string())
    }))
});

export const zUsersUpdateResponse = zCustomUser;

export const zUsersMeRetrieveData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        date_joined: z.optional(z.string()),
        email__contains: z.optional(z.string()),
        first_name__contains: z.optional(z.string()),
        first_name__exact: z.optional(z.string()),
        groups__id__exact: z.optional(z.string()),
        groups__id__in: z.optional(z.string()),
        id__exact: z.optional(z.string()),
        id__in: z.optional(z.string()),
        is_active: z.optional(z.string()),
        last_name__contains: z.optional(z.string()),
        last_name__exact: z.optional(z.string())
    }))
});

export const zUsersMeRetrieveResponse = zCustomUser;