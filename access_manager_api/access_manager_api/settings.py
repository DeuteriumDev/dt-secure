"""
Django settings for access_manager_api project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from django.core.management.commands.runserver import Command as runserver
import os
from datetime import timedelta
from rest_framework.settings import api_settings


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
runserver.default_port = os.getenv("PORT") or "8873"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = (
    os.getenv("SECRET_KEY")
    or "django-insecure-x*z$@+__8yqky%tx$!o3&3v!noe^av6cuxl-*-asdasd&1"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.getenv("DJANGO_ENV") or "DEVELOPMENT") != "PRODUCTION"

ALLOWED_HOSTS = (os.getenv("ALLOWED_HOSTS") or "localhost,127.0.0.1").split(",")
CSRF_TRUSTED_ORIGINS = (os.getenv("CSRF_TRUSTED_ORIGINS") or "http://localhost").split(
    ","
)

HOST_NAME = os.getenv("HOST_NAME") or "http://localhost"

# Application definition

INSTALLED_APPS = [
    # install libs
    "unfold",
    "unfold.contrib.filters",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "drf_spectacular",
    "django_filters",
    "django_celery_beat",
    "filters",
    "simple_history",
    "polymorphic",
    "durin",
    "django_extensions",
    # apps
    "accounts",
    "access_control",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
]

ROOT_URLCONF = "access_manager_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = (
    os.getenv("WSGI_APPLICATION") or "access_manager_api.wsgi.application"
)


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DB_NAME = os.getenv("POSTGRES_DB") or "postgres"
DB_SCHEMA = os.getenv("POSTGRES_SCHEMA") or "dt"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": DB_NAME,
        "USER": os.getenv("POSTGRES_USER") or "postgres",
        "PASSWORD": os.getenv("POSTGRES_PASSWORD") or "postgres",
        "HOST": os.getenv("POSTGRES_HOST") or "localhost",
        "PORT": os.getenv("POSTGRES_PORT") or "54324",
        "OPTIONS": {
            "options": f"-c search_path={DB_SCHEMA}",
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
# DEFAULT_AUTO_FIELD = "access_manager_api.fields.UUIDAutoField"
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "access_manager_api.pagination.CustomPageNumberPagination",
    "PAGE_SIZE": int(os.getenv("PAGE_SIZE") or "10"),
    "DEFAULT_AUTHENTICATION_CLASSES": ("durin.auth.TokenAuthentication",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

REST_DURIN = {
    "DEFAULT_TOKEN_TTL": timedelta(days=365),
    "TOKEN_CHARACTER_LENGTH": 64,
    "USER_SERIALIZER": "accounts.serializers.CustomUserSerializer",
    "AUTH_HEADER_PREFIX": "Token",
    "EXPIRY_DATETIME_FORMAT": api_settings.DATETIME_FORMAT,
    "TOKEN_CACHE_TIMEOUT": 60,
    "REFRESH_TOKEN_ON_LOGIN": True,
    "AUTHTOKEN_SELECT_RELATED_LIST": ["user"],
    "API_ACCESS_CLIENT_NAME": None,
    "API_ACCESS_EXCLUDE_FROM_SESSIONS": False,
    "API_ACCESS_RESPONSE_INCLUDE_TOKEN": False,
}

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # this is default
)

AUTH_USER_MODEL = "accounts.CustomUser"
